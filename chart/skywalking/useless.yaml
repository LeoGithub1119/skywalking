# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for skywalking.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

serviceAccounts:
  oap:
    create: true
    name: ""

imagePullSecrets: []

initContainer:
  image: busybox
  tag: '1.30'

oap:
 
  initJob:
    enabled: true
    timeout: 3600
    command:
      - "sh"
      - "-c"
      - |
        for i in $(seq 1 60); do nc -z -w3 skywalking-cluster-master-headless 9200 && exit 0 || sleep 5; done; exit 1
  
  waitForStorage:
    enabled: true
    timeout: 1800

  name: oap
  image:
    repository: skywalking.docker.scarf.sh/apache/skywalking-oap-server
    tag: 10.2.0
    pullPolicy: IfNotPresent
  storageType: elasticsearch
  ports:
    grpc: 11800
    rest: 12800
    zipkinreceiver: 9411  
  replicas: 1
  service:
    type: ClusterIP
    annotations: {}

  javaOpts: "-Xms2g -Xmx2g -Dlogging.level=INFO \
             -Dskywalking.plugin.toolkit.log.use.console=true \
             -Dorg.apache.skywalking.http.responseTimeout=300000 \
             -Dcom.linecorp.armeria.defaultResponseTimeoutMillis=300000"


  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "2"
      memory: "4Gi"  
  livenessProbe:
    tcpSocket:
      port: 12800
    initialDelaySeconds: 5
    periodSeconds: 20
    failureThreshold: 6 
  startupProbe:
    tcpSocket:
      port: 12800
    failureThreshold: 9
    periodSeconds: 10  
  readinessProbe:
    tcpSocket:
      port: 12800
    initialDelaySeconds: 5
    periodSeconds: 20
  securityContext:
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000  
  env:
    SW_RECEIVER_ZIPKIN: default
    SW_RECEIVER_ZIPKIN_REST_PORT: "9411"
    SW_QUERY_ZIPKIN: default
    SW_CONFIGURATION: k8s-configmap
    SW_CONFIG_CONFIGMAP_PERIOD: "60"
    SW_STORAGE_ES_INIT_TIMEOUT: "60"
    SW_STORAGE_ES_CONNECTION_TIMEOUT: "60000"
    SW_STORAGE_ES_RESPONSE_TIMEOUT: "300000"
    SW_STORAGE_ES_INDEX_SHARDS_NUMBER:   "1"
    SW_STORAGE_ES_SOCKET_TIMEOUT: "300000"   
    SW_STORAGE_ES_INDEX_REPLICAS_NUMBER: "0"
  config:
    receiver-ebpf:
        selector: ${SW_RECEIVER_EBPF:default}
        default: {}
    agent-analyzer:
      default:
        meterAnalyzerActiveFiles: network-profiling
    # metadata-service-mapping.yaml: |
    #   serviceName: e2e::${LABELS["service.istio.io/canonical-name"]}
    #   serviceInstanceName: ${NAME}
    # oal:
    #   core.oal: |
    #     service_resp_time = from(Service.latency).longAvg();
    #     service_sla = from(Service.*).percent(status == true);
    #     service_cpm = from(Service.*).cpm();
    # log4j2.xml: |
    #   <Configuration status="INFO">
    #     <Appenders>
    #       <Console name="Console" target="SYSTEM_OUT">
    #         <PatternLayout pattern="[%d{ISO8601}][%-5p][%-25c] %m%n"/>
    #       </Console>
    #     </Appenders>
    #     <Loggers>
    #       <Root level="INFO">
    #         <AppenderRef ref="Console"/>
    #       </Root>
    #     </Loggers>
    #   </Configuration>
    # ui-initialized-templates:
    #   general:
    #     general-service.json: |
    #       [{"id":"General-Service" ... }]
  dynamicConfig:
    enabled: false
    period: 60
    config:
      alarm.default.alarm-settings: |
        rules:
          service_resp_time_rule:
            metrics-name: service_resp_time
            op: ">"
            threshold: 1000
            period: 10
            count: 3
            silence-period: 5
            message: "Response time of service {name} is more than 1000ms in 3 out of last 10 minutes."

  secretMounts: []
  envoy:
    als:
      enabled: true


ui:
  name: ui
  replicas: 1
  image:
    repository: skywalking.docker.scarf.sh/apache/skywalking-ui
    tag: 10.2.0
    pullPolicy: IfNotPresent
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    path: /
    hosts:
      - skywalking.genai-staging.nchc.org.tw
    tls:
      - secretName: skywalking-ui-tls
        hosts:
          - skywalking.genai-staging.nchc.org.tw
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 8080
    annotations: {}
  securityContext:
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000  
  env:
    - name: SW_OAP_ADDRESS
      value: "http://skywalking-skywalking-helm-oap:12800"
    - name: SW_ZIPKIN_ADDRESS
      value: "http://skywalking-skywalking-helm-oap:9411"

  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi" 

oapInit:
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  extraPodLabels: {}
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"  



elasticsearch:
  enabled: true
  config: # For users of an existing elasticsearch cluster, takes effect when `elasticsearch.enabled` is false
    port:
      http: 9200
    host: elasticsearch
    user: "xxx" # [optional]
    password: "xxx" # [optional]
  clusterName: "skywalking-cluster"
  nodeGroup: "master"
  masterService: "skywalking-cluster-master-headless"
  roles:
    master: "true"
    ingest: "true"
    data: "true"
    ml: "true"
    remote_cluster_client: "true"
  replicas: 3
  minimumMasterNodes: 2
  esMajorVersion: "7"
  masterService: skywalking-cluster-master-headless 
  master:
    extraEnvs:
      - name: cluster.initial_master_nodes
        value: "skywalking-cluster-master-0,skywalking-cluster-master-1,skywalking-cluster-master-2"
      - name: discovery.seed_hosts
        value: "skywalking-cluster-master-headless"   
  esConfig:
    elasticsearch.yml: |
        cluster.name: ${CLUSTER_NAME}
        node.name:   ${NODE_NAME}
        network.host: 0.0.0.0
        http.port:   9200
        discovery.seed_hosts: skywalking-cluster-master-headless
        cluster.initial_master_nodes: skywalking-cluster-master-0,skywalking-cluster-master-1,skywalking-cluster-master-2
        xpack.security.enabled: false
    log4j2.properties: |
      logger.action.name = org.elasticsearch.actio
      logger.action.level = info
      appender.console.type = Console
      appender.console.name = console
      appender.console.layout.type = PatternLayout
      appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n
      rootLogger.level = info
      rootLogger.appenderRef.console.ref = console
  extraEnvs:
    - name: CLUSTER_NAME
      value: "skywalking-cluster"
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  secretMounts: []
  podAnnotations: {}
  labels: {}
  esJavaOpts: "-Xmx1g -Xms1g -Xlog:gc*:file=/usr/share/elasticsearch/logs/gc.log:time,tags:filecount=5,filesize=2m"
  resources:
    requests:
      cpu: "500m"
      memory: "2Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  initResources: {}
  sidecarResources: {}
  networkHost: "0.0.0.0"
  rbac:
    create: false
    serviceAccountName: ""
  podSecurityPolicy:
    create: false
    name: ""
    spec:
      privileged: true
      fsGroup:
        rule: RunAsAny
      runAsUser:
        rule: RunAsAny
      seLinux:
        rule: RunAsAny
      supplementalGroups:
        rule: RunAsAny
      volumes:
        - secret
        - configMap
        - persistentVolumeClaim
  volumeClaimTemplate:
    accessModes: ["ReadWriteOnce"]
    storageClassName: "nfs-sc-new"
    resources:
      requests:
        storage: 50Gi
  persistence:
    enabled: true
    annotations: {}
  storage:
  elasticsearch:
    connectTimeout: 3000        # 與 ES 建立 TCP 連線
    socketTimeout: 30000        # 等待資料封包
    responseTimeout: 15000      # << 伺服器多久必須回應 (預設 15s)
  extraVolumes: []
  extraVolumeMounts: []
  extraInitContainers: []
  priorityClassName: ""
  antiAffinityTopologyKey: "kubernetes.io/hostname"
  antiAffinity: "soft"
  nodeAffinity: {}
  podManagementPolicy: "Parallel"
  protocol: http
  httpPort: 9200
  transportPort: 9300
  service:
    labels: {}
    labelsHeadless: {}
    type: ClusterIP
    nodePort: ""
    annotations: {}
    httpPortName: http
    transportPortName: transport
  updateStrategy: RollingUpdate
  maxUnavailable: 1
  podSecurityContext:
    # fsGroup: 1000
    # runAsUser: 1000
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsNonRoot: false
    # runAsUser: 1000
  # terminationGracePeriod: 120
  # sysctlVmMaxMapCount: 262144
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5
  clusterHealthCheckParams: "wait_for_no_relocating_shards=true&timeout=30s"
  schedulerName: ""
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  ingress:
    enabled: false
    annotations: {}
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
  nameOverride: ""
  fullnameOverride: ""
  masterTerminationFix: false
  lifecycle: {}
  sysctlInitContainer:
    enabled: true
  keystore: []




  
postgresql:
  enabled: false # Whether to start a demo postgresql deployment, don't use this for production.
  config:
    # The hostname of your own postgresql service, this only takes effect when postgresql.enabled is false.
    host: postgresql-service.your-awesome-company.com
  auth:
    postgresPassword: "123456"
    username: postgres
    password: "123456"
    database: skywalking
  containerPorts:
    postgresql: 5432
  primary:
    persistence:
      enabled: false
  readReplicas:
    persistence:
      enabled: false

banyandb:
  enabled: false
  config:
    grpcAddress: "banyandb-grpc:17912"
    httpAddress: "banyandb-http:17913"
  standalone:
    enabled: true
  cluster:
    enabled: false
    liaison:
      replicas: 1
    data:
      replicas: 1
  etcd:
    enabled: false
    replicaCount: 1

satellite:
  name: satellite
  replicas: 1
  enabled: true
  image:
    repository: apache/skywalking-satellite
    tag: v1.3.0
    pullPolicy: IfNotPresent
  ports:
    grpc: 11800
    pprof: 6060  
  service:
    type: ClusterIP
  antiAffinity: "soft"
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  resources:
    limits:
      cpu: 2  
      memory: 2Gi
    requests:
      cpu: 1
      memory: 1Gi
  podAnnotations: {}
  env:
    

  config:
    satellite_config.yaml: |
      selector: default
      receivers:
        - grpc:
            addr: 0.0.0.0:11800
      forwarders:
        - oap:
            addr: skywalking-skywalking-helm-oap:11800 
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

nameOverride: ""
fullnameOverride: ""